# Code used for CNN
pip install numpy tensorflow geopandas rasterio shapely scikit-learn matplotlib
import numpy as np
import tensorflow as tf
import geopandas as gpd
import rasterio
from shapely.geometry import mapping
from rasterio.mask import mask
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import os

# === CONFIG ===
BASE_PATH = '/content/drive/MyDrive/Seagrass'
IMAGE_PATH = f'{BASE_PATH}/Raster/t2.tif'
SHAPEFILE_PATH = f'{BASE_PATH}/Vector/Samples2.shp'
MODEL_SAVE_PATH = f'{BASE_PATH}/Vector/CNN_MODEL_VAL_1.h5'
TIFF_OUTPUT_PATH = f'{BASE_PATH}/Raster/CNN_OP_VAL_1.tif'
PNG_OUTPUT_PATH = f'{BASE_PATH}/CNN_OP_VAL_1.png'
CLASS_COLUMN = 'class'

label_map = {
    'seagrass': 0,
    'land': 1,
    'mangroves': 2,
    'water': 3,
    'othervegetation': 4,
    'cloud': 5
}

colors = {
    0: [144, 238, 144],   # seagrass ‚Üí light green
    1: [139, 69, 19],     # land ‚Üí brown
    2: [34, 139, 34],     # mangroves ‚Üí green (forest green)
    3: [0, 191, 255],     # water ‚Üí blue (deep sky blue)
    4: [0, 100, 0],       # other vegetation ‚Üí dark green
    5: [255, 255, 255]    # cloud ‚Üí white
}

# === Load Data ===
raster = rasterio.open(IMAGE_PATH)
image = np.transpose(raster.read(), (1, 2, 0))  # H x W x Bands
gdf = gpd.read_file(SHAPEFILE_PATH)

if raster.crs is None:
    print("‚ö†Ô∏è Raster CRS is missing. Assigning from shapefile CRS.")
    raster.crs = gdf.crs
elif gdf.crs != raster.crs:
    print(" Reprojecting shapefile to match raster CRS...")
    gdf = gdf.to_crs(raster.crs)

gdf = gdf.sample(n=114, random_state=42)

# === Extract features ===
features, labels = [], []
for _, row in gdf.iterrows():
    geom = [mapping(row.geometry)]
    label = label_map[row[CLASS_COLUMN]]
    try:
        out_image, _ = mask(raster, geom, crop=False)
        out_image = np.transpose(out_image, (1, 2, 0))
        mask_array = out_image.sum(axis=2) > 0
        pixels = out_image[mask_array]
        for pixel in pixels:
            if not np.any(np.isnan(pixel)):
               features.append(pixel)
               labels.append(label)
    except Exception as e:
        print(f"‚ùå Error extracting features: {e}")
        continue

features = np.array(features)
labels = np.array(labels)
print("‚úÖ Features shape:", features.shape)
print("labels shape:", labels.shape)

# === Preprocessing ===
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical

num_classes = len(label_map)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(features)
X_cnn = X_scaled[..., np.newaxis]  # (samples, bands, 1)
y_cat = to_categorical(labels, num_classes=num_classes)

# === Train-test split
X_train, X_val, y_train, y_val = train_test_split(X_cnn, y_cat, test_size=0.2, random_state=42)

# === Build CNN Model ===
model = Sequential([
    Conv1D(64, kernel_size=3, activation='relu', padding='same', input_shape=(X_train.shape[1], 1)),
    MaxPooling1D(pool_size=2),
    Conv1D(32, kernel_size=3, activation='relu', padding='same'),
    MaxPooling1D(pool_size=2),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(num_classes, activation='softmax')
    ])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# === Train with Validation ===
history = model.fit(X_train, y_train, validation_data=(X_val, y_val),
                    epochs=30, batch_size=64, verbose=1)

# === Evaluate ===
val_loss, val_acc = model.evaluate(X_val, y_val)
print(f"\n‚úÖ Validation Accuracy: {val_acc:.4f}")

y_pred = model.predict(X_val)
y_pred_labels = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_val, axis=1)

print("\n Classification Report:")
print(classification_report(y_true, y_pred_labels))

print(" Confusion Matrix:")
print(confusion_matrix(y_true, y_pred_labels))

# === Accuracy plot ===
plt.figure()
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title("CNN Model Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.grid(True)
plt.savefig(BASE_PATH + "/accuracy_plot.png")
plt.show()

# === Predict Full Raster ===
H, W, B = image.shape
flat_pixels = image.reshape(-1, B)
flat_scaled = scaler.transform(flat_pixels)
flat_scaled = flat_scaled[..., np.newaxis]

preds = model.predict(flat_scaled, batch_size=1024, verbose=1)
pred_labels = np.argmax(preds, axis=1)
pred_mask = pred_labels.reshape(H, W)

# === Generate RGB Map ===
rgb_image = np.zeros((H, W, 3), dtype=np.uint8)
for k, color in colors.items():
    rgb_image[pred_mask == k] = color

# === Save PNG with Legend and Title ===
from matplotlib.patches import Patch

legend_elements = [Patch(facecolor=np.array(c)/255.0, edgecolor='k', label=cls)
                   for cls, c in zip(label_map.keys(), colors.values())]

plt.figure(figsize=(10, 10))
plt.imshow(rgb_image)
plt.title("CNN Classification Result", fontsize=14)
plt.axis('off')
plt.legend(handles=legend_elements, loc='lower right', fontsize=9)
plt.tight_layout()
plt.savefig(PNG_OUTPUT_PATH, dpi=300)
plt.show()

# === Save GeoTIFF ===
with rasterio.open(
    TIFF_OUTPUT_PATH, 'w',
    driver='GTiff', height=H, width=W, count=1,
    dtype=rasterio.uint8, crs=raster.crs, transform=raster.transform
) as dst:
    dst.write(pred_mask.astype(np.uint8), 1)

print(" Classification map saved with title and legend.")

# k-fold Cross Validation
import numpy as np
import tensorflow as tf
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# === INPUT: features and labels must be prepared from raster+shapefile ===
# Use the code from your previous setup to extract 'features' and 'labels' before this block

num_classes = 6  # Based on your class setup
scaler = StandardScaler()
X_scaled = scaler.fit_transform(features)
X = X_scaled[..., np.newaxis]  # (samples, bands, 1)
y = to_categorical(labels, num_classes=num_classes)

kf = KFold(n_splits=5, shuffle=True, random_state=42)
fold = 1
fold_accuracies = []

for train_idx, val_idx in kf.split(X):
    print(f"\nüîÅ Fold {fold}")
    X_train, X_val = X[train_idx], X[val_idx]
    y_train, y_val = y[train_idx], y[val_idx]

    # === Build fresh CNN model ===
    model = Sequential([
        Conv1D(64, kernel_size=3, activation='relu', padding='same', input_shape=(X.shape[1], 1)),
        MaxPooling1D(pool_size=2),
        Conv1D(32, kernel_size=3, activation='relu', padding='same'),
        MaxPooling1D(pool_size=2),
        Flatten(),
        Dense(64, activation='relu'),
        Dropout(0.3),
        Dense(num_classes, activation='softmax')
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    history = model.fit(X_train, y_train, epochs=10, batch_size=64,
                        validation_data=(X_val, y_val), verbose=0)

    val_preds = model.predict(X_val)
    y_true = np.argmax(y_val, axis=1)
    y_pred = np.argmax(val_preds, axis=1)

    acc = accuracy_score(y_true, y_pred)
    fold_accuracies.append(acc)
    print(f" Fold {fold} Accuracy: {acc:.4f}")

    print(" Classification Report:")
    print(classification_report(y_true, y_pred, target_names=list(label_map.keys())))

    print("Confusion Matrix:")
    print(confusion_matrix(y_true, y_pred))

    fold += 1

# === Summary ===
print("\n Cross-Validation Summary:")
print("Fold Accuracies:", [f"{acc:.4f}" for acc in fold_accuracies])
print(f"Mean Accuracy: {np.mean(fold_accuracies):.4f} ¬± {np.std(fold_accuracies):.4f}")

# Stratified Random Sampling
import geopandas as gpd
from sklearn.model_selection import StratifiedShuffleSplit
import pandas as pd

# === Load Sample Shapefile ===
gdf = gpd.read_file('/content/drive/MyDrive/Seagrass/Vector/Samples1.shp')

# === Define class column ===
class_column = 'class'

# Ensure class column is string and lowercase for consistency
gdf[class_column] = gdf[class_column].astype(str).str.lower()

# === Encode classes to numbers ===
label_map = {label: idx for idx, label in enumerate(sorted(gdf[class_column].unique()))}
gdf['label_id'] = gdf[class_column].map(label_map)

# === Perform Stratified Split ===
splitter = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
train_idx, val_idx = next(splitter.split(gdf, gdf['label_id']))

train_gdf = gdf.iloc[train_idx].copy()
val_gdf = gdf.iloc[val_idx].copy()

print("Stratified sampling completed.")
print("üî¢ Class distribution in full data:\n", gdf['label_id'].value_counts())
print("üîπ Train distribution:\n", train_gdf['label_id'].value_counts())
print("üî∏ Val distribution:\n", val_gdf['label_id'].value_counts())

# Optional: Save the splits
train_gdf.to_file('/content/drive/MyDrive/Seagrass/Vector/Train_Samples_CNN.shp')
val_gdf.to_file('/content/drive/MyDrive/Seagrass/Vector/Val_Samples_CNN.shp')

import numpy as np
import tensorflow as tf
import geopandas as gpd
import rasterio
from shapely.geometry import mapping
from rasterio.mask import mask
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt

# === Paths ===
BASE_PATH = '/content/drive/MyDrive/Seagrass'
RASTER_PATH = f'{BASE_PATH}/Raster/t3.tif'
TRAIN_SHP = f'{BASE_PATH}/Vector/Train_Samples_CNN.shp'
VAL_SHP = f'{BASE_PATH}/Vector/Val_Samples_CNN.shp'
CLASS_COLUMN = 'class'

# === Class Map ===
label_map = {
    'seagrass': 0,
    'land': 1,
    'mangroves': 2,
    'water': 3,
    'othervegetation': 4,
    'cloud': 5
}
inv_label_map = {v: k for k, v in label_map.items()}

# === Load Raster ===
raster = rasterio.open(RASTER_PATH)
image = np.transpose(raster.read(), (1, 2, 0))

# === Function to extract features from shapefile ===
def extract_features(gdf):
    features, labels = [], []
    for _, row in gdf.iterrows():
        geom = [mapping(row.geometry)]
        label = label_map[row[CLASS_COLUMN].lower()]
        try:
            out_image, _ = mask(raster, geom, crop=False)
            out_image = np.transpose(out_image, (1, 2, 0))
            mask_array = out_image.sum(axis=2) > 0
            pixels = out_image[mask_array]
            for pixel in pixels:
                if not np.any(np.isnan(pixel)):
                    features.append(pixel)
                    labels.append(label)
        except:
            continue
    return np.array(features), np.array(labels)

# === Extract Train/Val ===
train_gdf = gpd.read_file(TRAIN_SHP)
val_gdf = gpd.read_file(VAL_SHP)
X_train, y_train = extract_features(train_gdf)
X_val, y_val = extract_features(val_gdf)

print(" Data loaded and extracted:")
print(f"Train: {X_train.shape}, Val: {X_val.shape}")

# === Preprocessing ===
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_train_cnn = X_train_scaled[..., np.newaxis]
X_val_cnn = X_val_scaled[..., np.newaxis]

y_train_cat = to_categorical(y_train, num_classes=6)
y_val_cat = to_categorical(y_val, num_classes=6)

# === CNN Model ===
model = Sequential([
    Conv1D(64, kernel_size=3, activation='relu', input_shape=(X_train_cnn.shape[1], 1), padding='same'),
    MaxPooling1D(2),
    Conv1D(32, kernel_size=3, activation='relu', padding='same'),
    MaxPooling1D(2),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(6, activation='softmax')
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# === Train ===
history = model.fit(X_train_cnn, y_train_cat, epochs=15, batch_size=64, validation_data=(X_val_cnn, y_val_cat), verbose=1)

# === Evaluation ===
val_loss, val_acc = model.evaluate(X_val_cnn, y_val_cat, verbose=0)
print(f" Validation Accuracy: {val_acc:.4f}")

# === Classification Report ===
y_pred = np.argmax(model.predict(X_val_cnn), axis=1)
print("\n Classification Report:")
print(classification_report(y_val, y_pred, target_names=[inv_label_map[i] for i in range(6)]))

# === Confusion Matrix ===
cm = confusion_matrix(y_val, y_pred)
print("\n Confusion Matrix:\n", cm)

# === Accuracy Plot ===
plt.figure(figsize=(8, 5))
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title("Training vs Validation Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.grid(True)
plt.show()
