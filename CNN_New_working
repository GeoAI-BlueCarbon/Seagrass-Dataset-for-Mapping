pip install numpy tensorflow geopandas rasterio shapely scikit-learn matplotlib

import numpy as np
import geopandas as gpd
import rasterio
from shapely.geometry import mapping
from rasterio.mask import mask
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.model_selection import KFold
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.activations import gelu
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint
import os

# === CONFIG ===
BASE_PATH = '/content/drive/MyDrive/Seagrass'
RASTER_PATH = f'{BASE_PATH}/Raster/t2.tif'
SHAPEFILE_PATH = f'{BASE_PATH}/Vector/Samples_4.shp'
CLASS_COLUMN = 'class'
MODEL_DIR = f'{BASE_PATH}'

os.makedirs(MODEL_DIR, exist_ok=True)

label_map = {
    'seagrass': 0, 'land': 1, 'mangroves': 2,
    'water': 3, 'othervegetation': 4
}
inv_label_map = {v: k for k, v in label_map.items()}

# === Load Raster and Shapefile ===
raster = rasterio.open(RASTER_PATH)
image = np.transpose(raster.read(), (1, 2, 0))
gdf = gpd.read_file(SHAPEFILE_PATH)

if raster.crs is None:
    raster.crs = gdf.crs
elif gdf.crs != raster.crs:
    gdf = gdf.to_crs(raster.crs)

# === Sample and Extract Features ===
gdf = gdf.sample(n=105, random_state=42)
features, labels = [], []

for _, row in gdf.iterrows():
    geom = [mapping(row.geometry)]
    label = label_map[row[CLASS_COLUMN].lower()]
    try:
        out_image, _ = mask(raster, geom, crop=False)
        out_image = np.transpose(out_image, (1, 2, 0))
        mask_array = out_image.sum(axis=2) > 0
        pixels = out_image[mask_array]
        for pixel in pixels:
            if not np.any(np.isnan(pixel)):
                features.append(pixel)
                labels.append(label)
    except:
        continue

features = np.array(features)
labels = np.array(labels)
print("‚úÖ Features:", features.shape, "Labels:", labels.shape)

# === Preprocess ===
scaler = StandardScaler()
X = scaler.fit_transform(features)
X = X[..., np.newaxis]
y = to_categorical(labels, num_classes=len(label_map))

# === Config ===
kernel_sizes = [3]  # simulate 8, 16, 24 if 2D CNNs
learning_rates = [0.001]
epochs = 50
kf = KFold(n_splits=10, shuffle=True, random_state=42)

# === Initialize Best Model Tracking ===
best_model = None
best_accuracy = 0
best_fold_info = {'fold': 0, 'kernel': 0, 'lr': 0, 'history': None}

# === K-Fold Training ===
fold = 1
for k in kernel_sizes:
    for lr in learning_rates:
        print(f"\nüìò Kernel Size: {k}, Learning Rate: {lr}")

        for train_idx, val_idx in kf.split(X):
            print(f"\nüîÅ Fold {fold}/10")
            X_train, X_val = X[train_idx], X[val_idx]
            y_train, y_val = y[train_idx], y[val_idx]

            model = Sequential([
                Conv1D(64, kernel_size=k, activation='gelu', padding='same', input_shape=(X.shape[1], 1)),
                MaxPooling1D(2),
                Conv1D(32, kernel_size=k, activation='gelu', padding='same'),
                MaxPooling1D(2),
                Flatten(),
                Dense(64, activation='gelu'),
                Dropout(0.3),
                Dense(len(label_map), activation='softmax')
            ])

            model.compile(optimizer=Adam(learning_rate=lr), 
                         loss='categorical_crossentropy', 
                         metrics=['accuracy'])

            history = model.fit(
                X_train, y_train,
                validation_data=(X_val, y_val),
                epochs=epochs,
                batch_size=64,
                verbose=0
            )

            # Evaluate the model
            val_acc = model.evaluate(X_val, y_val, verbose=0)[1]
            
            # Track best model
            if val_acc > best_accuracy:
                best_accuracy = val_acc
                best_model = tf.keras.models.clone_model(model)
                best_model.set_weights(model.get_weights())
                best_fold_info = {
                    'fold': fold,
                    'kernel': k,
                    'lr': lr,
                    'history': history
                }
                print(f"üèÜ New best model at fold {fold} with val_accuracy {val_acc:.4f}")

            fold += 1

# === Save Only the Best Model ===
if best_model is not None:
    best_model_path = f"{MODEL_DIR}/best_model_fold{best_fold_info['fold']}.h5"
    best_model.save(best_model_path)
    print(f"\nüíæ Saved best model from fold {best_fold_info['fold']} with val_accuracy {best_accuracy:.4f}")
    
    # Plot training history
    plt.figure(figsize=(12, 5))
    plt.suptitle(f"Best Model (Fold {best_fold_info['fold']})", y=1.05)
    
    plt.subplot(1, 2, 1)
    plt.plot(best_fold_info['history'].history['accuracy'], label='Train')
    plt.plot(best_fold_info['history'].history['val_accuracy'], label='Validation')
    plt.title('Accuracy')
    plt.ylabel('Accuracy')
    plt.xlabel('Epoch')
    plt.legend()
    
    plt.subplot(1, 2, 2)
    plt.plot(best_fold_info['history'].history['loss'], label='Train')
    plt.plot(best_fold_info['history'].history['val_loss'], label='Validation')
    plt.title('Loss')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend()
    
    plt.tight_layout()
    plt.show()
else:
    raise ValueError("No valid model was trained")

# === Classify Full Raster ===
H, W, B = image.shape
flat_pixels = image.reshape(-1, B)
flat_scaled = scaler.transform(flat_pixels)
flat_scaled = flat_scaled[..., np.newaxis]

# Predict in batches
pred_labels = np.zeros(flat_scaled.shape[0], dtype=np.uint8)
batch_size = 8192
for i in range(0, len(flat_scaled), batch_size):
    batch = flat_scaled[i:i+batch_size]
    preds = best_model.predict(batch, verbose=0)
    pred_labels[i:i+batch_size] = np.argmax(preds, axis=1)

classified_image = pred_labels.reshape(H, W)

# === Create Visualization ===
color_map = np.array([
    [144, 238, 144],  # seagrass (light green)
    [139, 69, 19],    # land (brown)
    [34, 139, 34],    # mangroves (green)
    [0, 191, 255],    # water (blue)
    [0, 100, 0]       # othervegetation (dark green)
]) / 255  # Normalize to [0,1] for matplotlib

rgb_image = color_map[classified_image]

plt.figure(figsize=(15, 12))
img = plt.imshow(rgb_image)

# Create legend
from matplotlib.patches import Patch
legend_elements = [
    Patch(facecolor=color_map[i], label=f"{inv_label_map[i]}") 
    for i in range(len(color_map))
]

plt.legend(
    handles=legend_elements,
    loc='upper left',
    bbox_to_anchor=(1.05, 1),
    title="Classes",
    frameon=True,
    facecolor='white'
)

plt.title(f"Classification Map (Best Fold {best_fold_info['fold']}, Acc: {best_accuracy:.2f})", pad=20)
plt.axis('off')
plt.tight_layout()
plt.show()

# === Save Results ===
output_path = f"{MODEL_DIR}/classification_fold{best_fold_info['fold']}.png"
plt.savefig(output_path, bbox_inches='tight', dpi=300)
print(f"‚úÖ Saved classification map to {output_path}")

# Save GeoTIFF
output_tif_path = f"{MODEL_DIR}/classified_output.tif"
with rasterio.open(
    output_tif_path,
    'w',
    driver='GTiff',
    height=H,
    width=W,
    count=1,
    dtype=rasterio.uint8,
    crs=raster.crs,
    transform=raster.transform
) as dst:
    dst.write(classified_image.astype(np.uint8), 1)
print(f"‚úÖ Saved classified GeoTIFF to {output_tif_path}")

plt.show()
